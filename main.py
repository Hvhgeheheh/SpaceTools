#### –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ####

import asyncio
import json
import os

from aiogram import Bot, Dispatcher
from app.handlers import router
from datetime import datetime

from config import token

# üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
USERS_FILE = "users.json"

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Å ID —á–∞—Ç–æ–≤
def load_users_pend():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ID —á–∞—Ç–æ–≤, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –æ—à–∏–±–∫–∏ —Å –ø—É—Å—Ç—ã–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º."""
    if not os.path.exists(USERS_FILE) or os.stat(USERS_FILE).st_size == 0:
        return {
            "allowed_users": [],
            "pending_users": {},
            "admin_chat_id": -1002364159616,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "output_chat_id": -4648248130     # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)

            # –ï—Å–ª–∏ admin_chat_id –∏–ª–∏ output_chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            data.setdefault("admin_chat_id", -1002364159616)
            data.setdefault("output_chat_id", -4648248130)

            return data
    except json.JSONDecodeError:
        return {
            "allowed_users": [],
            "pending_users": {},
            "admin_chat_id": -1002364159616,
            "output_chat_id": -4648248130
        }

def save_users_pend(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ID —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª."""
    with open(USERS_FILE, "w", encoding="utf-8") as file:
        json.dump(users, file, indent=4, ensure_ascii=False)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings = load_users_pend()

# –¢–µ–ø–µ—Ä—å ID —á–∞—Ç–æ–≤ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞, –∞ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∂–µ—Å—Ç–∫–æ
ADMIN_CHAT_ID = settings["admin_chat_id"]
OUTPUT_CHAT_ID = settings["output_chat_id"]

#### –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ####

bot = Bot(token=token)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
async def send_start_message():
    start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message = f"üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n‚è≥ –í—Ä–µ–º—è: <code>{start_time}</code>"
    await bot.send_message(OUTPUT_CHAT_ID, message, parse_mode="HTML")

async def send_stop_message():
    stop_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message = f"üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!\n‚è≥ –í—Ä–µ–º—è: <code>{stop_time}</code>"
    await bot.send_message(OUTPUT_CHAT_ID, message, parse_mode="HTML")

async def main():
    dp.include_router(router)
    print('Bot has been started ‚úÖ')
    await send_start_message()
    
    try:
        await dp.start_polling(bot)
    finally:
        await send_stop_message()
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('‚õî Exited')
